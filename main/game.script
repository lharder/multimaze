require( "deflibs.defold" )

local lua = require( "deflibs.lualib" )
local Roommanager = require( "level.playground.roommanager.roommanager" )
local Registry = require( "nexus.registry" )
local Game = require( "nexus.game" )
local Host = require( "nexus.host" )
local Stats = require( "level.playground.characters.player.stats" )

local Serializable = require( "nexus.serializable" )

local MSG_SET_PROPS = hash( "setProps" )


-- global ---------------------------
R = require( "main.multilang" )
GAME = Game.new( "MultiMaze" )
CAMERA_ID = "/camera"
PLAYER_ID = ""
PLAYERS = {}
MAP = {}
ROOMMANAGER = Roommanager.new()
PLAYER_STATS = Stats.new()

-------------------------------------
-- Globally available function: load a new room in the playground.
-- Unload the entire level to get rid of all objects, stop syncing.
-- Then reload playground with a new room and recreate all objects.
function loadRoom( roomid, entrypos )
	-- stop syncing objects
	GAME.client.syncObjs = {}
	GAME.client.registry = Registry.new()

	local messages = {}
	messages[ "playground:/level" ] = { roomid = roomid, entrypos = entrypos }
	msg.post( "main:/screenmaster", "load", { level = "/playground", messages = messages } )
end


-- global function to allow for displaying 
-- floating notifications, e.g. above the player
function notify( txt, size, time, pos )
	if pos == nil then pos = go.get_position() end
	if size == nil then size = 1 end
	if time == nil then time = 3 end
	if txt == nil then txt = "???" end
	
	local scale = vmath.vector3( size, size, size )
	local id = factory.create( "/factories#statementfactory", pos, nil, {}, scale )
	local url = msg.url( nil, id, "script" )
	msg.post( url, MSG_SET_PROPS, {
		text = txt,
		time = time
	})
	return id
end


-------------------------------------
function init( self )
	lua.randomize()
	msg.post( "main:/screenmaster", "load", { level = "setup" } ) 	
end




