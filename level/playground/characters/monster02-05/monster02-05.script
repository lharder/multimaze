local lua = require( "deflibs.lualib" )
local Registry = require( "nexus.registry" )
local Events = require( "level.playground.events" )


go.property( "dir", vmath.vector3( 1, 0, 0 ) )
go.property( "speed", 200 )

local MSG_SET_PROPS = hash( "setProps" )


local function attack( self )
	if not self.animating then 
		self.animating = true
		sprite.play_flipbook( "#sprite", "attack", function() 
			-- make speed 10% faster if created remotely
			self.animating = false
			sprite.play_flipbook( "#sprite", "walk" ) 
		end )
	end
end


local function turn( self, xDir )
	sprite.set_hflip( "#sprite", xDir == 1 )
	self.dir.x = xDir
end


local function hunt( self, cid )
	self.hunting = cid
	self.speed = self.maxspeed
	if self.pos.x < self.playerPos.y then 
		turn( self, 1 )
	else
		turn( self, -1 )
	end
end


local function setup( self, message ) 
	if GAME:isServer() then
		-- make globally available and start syncing
		self.gid = message.name
		GAME.client.registry:set( self.gid, go.get_id() )
		GAME:sync( self.gid ) 
	end
end


local function parse( self, message )
	-- if message.meta.type == Events.CREATE_SHOT then 
	-- end
end


local function updateDrone( self, dt ) 
	turn( self, self.dir.x )
end


local function updateServer( self, dt ) 
	self.pos = go.get_position()
	self.side = self.pos.x + ( self.dir.x * 24 ) + ( self.dir.x * self.speed * dt )
	self.below = self.pos.y - 40
	
	if self.hunting == nil then
		-- patrolling: run sideways, turn at obstacle
		if( MAP:isPassable( self.side, self.pos.y ) and
		  ( not MAP:isPassable( self.side, self.below ) ) ) then 
			self.pos.x = self.pos.x + ( self.dir.x * self.speed * dt )
		else
			self.dir.x = -self.dir.x
			turn( self, self.dir.x )
		end

		-- no target yet - find one :o)
		for i, gid in pairs( PLAYERS ) do
			self.playerCid = GAME.client.registry:getClientId( gid ) 

			if self.playerCid ~= nil then 
				self.playerPos = go.get_position( self.playerCid )	

				if lua.approximates( self.pos.y, self.playerPos.y, 10 ) then
					hunt( self, self.playerCid ) 

					-- always attack only one player:
					-- stop after finding one at proper position
					break 
				end
			end
		end

	else
		-- hunting a selected target:
		if( MAP:isPassable( self.side, self.pos.y ) and
		  ( not MAP:isPassable( self.side, self.below ) ) ) then 
			self.pos.x = self.pos.x + ( self.dir.x * self.speed * dt )
		end

		-- follow target that has been identified before
		self.playerPos = go.get_position( self.playerCid )
		if lua.approximates( self.pos.x, self.playerPos.x, 30 ) then 
			self.speed = 0
			attack( self )
		else
			self.speed = self.maxspeed
			if self.pos.x < self.playerPos.x then
				turn( self, 1 )
			else
				turn( self, -1 )
			end
		end

		if not ( lua.approximates( self.pos.y, self.playerPos.y, 20 ) ) then
			-- player has escaped, stop hunting
			hunt( self, nil ) 
		end
	end

	go.set_position( self.pos )
end
	


-- lifecycle methods ---------------------------
function init( self )
	go.set_scale( .5 )

	self.pos = go.get_position()
	go.set_position( vmath.vector3( self.pos.x, self.pos.y, .4 ) )

	self.maxspeed = self.speed
	self.pos = go.get_position()
	self.hunting = nil
	
	turn( self, self.dir.x )

	-- walk animation may be interrupted any time
	self.animating = false
	sprite.play_flipbook( "#sprite", "walk" )
end


function update( self, dt ) 
	if GAME:isServer() then 
		updateServer( self, dt )
	else
		updateDrone( self, dt )
	end
end


function on_message( self, message_id, message, sender )
	if message_id == MSG_SET_PROPS then
		setup( self, message )

	elseif message_id == GAME.MSG_EXEC_CMD then 
		parse( self, message )
		
	end
end



