local lua = require( "deflibs.lualib" )
local Events = require( "level.playground.events" )

go.property( "dir", vmath.vector3( 1, 0, 0 ) )
go.property( "speed", 100 )


local MODE_IDLE = 0
local MODE_ATTACK = 1
local IMPENETRABLE = { 29 }

local MSG_SET_PROPS 		= hash( "setProps" )
local MSG_TRIGGER_COLLISION = hash( "trigger_response" ) 

local GROUP_OBSTACLES 		= hash( "obstacle" )



local function switchToAttack( self )
	self.mode = MODE_ATTACK
	sprite.play_flipbook( "#sprite", "attack" )

	-- select one of the players and attack
	local i = math.random( 1, #PLAYERS )
	local cid = GAME.client.registry:getClientId( PLAYERS[ i ] ) 
	self.target = cid
	self.speed = 180
end


local function isImpenetrable( xPix, yPix )
	return ( not MAP:isInBounds( xPix, yPix ) ) or
		lua.contains( IMPENETRABLE, MAP:getTileValue( xPix, yPix ) ) 
end


local function sendMoveTo( pos )
	local gid = GAME.client.registry:getGlobalId( go.get_id() ) 
	local evt = Events.newMoveTo( gid, pos )
	GAME.client:sendToOtherClients( evt )	
end


local function selectTargetPos( self )
	if GAME:isServer() then 
		local r = math.random( 0, 10 )
		if r > 7 then
			switchToAttack( self )
		else
			-- select a random position
			self.targetPos = go.get_position()
			self.targetPos.x = self.targetPos.x + ( 4 * math.random( -40, 40 ) )
			self.targetPos.y = self.targetPos.y + ( 4 * math.random( -40, 40 ) )
		end

		sendMoveTo( self.targetPos )
	end
end


local function switchToIdle( self )
	self.mode = MODE_IDLE
	sprite.play_flipbook( "#sprite", "idle" )
	selectTargetPos( self )
	self.speed = 100
end


local function setup( self, message ) 
	-- if self.isLocalHero then 
	if GAME:isServer() then
		-- make globally available and start syncing
		self.gid = message.name
		GAME.client.registry:set( self.gid, go.get_id() )
		GAME:sync( self.gid, {{ key = "dir", segment = "script" }} ) 
	end
end

	
local function parse( self, message )
	if message.meta.type == Events.MOVE_TO then
		self.targetPos = message.attrs.pos
		self.dir = vmath.normalize( self.targetPos - go.get_position() )
	end
end


local function updateIdle( self, dt )
	self.pos = go.get_position()
	self.dir = vmath.normalize( self.targetPos - self.pos )
	self.pos.x = self.pos.x + self.dir.x * self.speed * dt
	self.pos.y = self.pos.y + self.dir.y * self.speed * dt

	if lua.approximates( self.pos.x, self.targetPos.x, 5 ) and 
	lua.approximates( self.pos.y, self.targetPos.y, 5 ) then
		selectTargetPos( self )
	end

	sprite.set_hflip( "#sprite", self.dir.x > 0 )

	if isImpenetrable( self.pos.x, self.pos.y ) then
		selectTargetPos( self )
	else
		-- bounce off if *someone/something*  
		-- provides a pushback force
		if self.pushback then 
			if MAP:isPassable( self.pos.x + self.pushback.x * dt, self.pos.y + self.pushback.y * dt ) then
				self.pos.x = self.pos.x + self.pushback.x * dt
				self.pos.y = self.pos.y + self.pushback.y * dt
				self.pushback = self.pushback * .95
				if vmath.length( self.pushback ) < 1 then self.pushback = nil end
			else
				self.pushback = nil 
			end
		end
		go.set_position( self.pos )
	end
end


local function updateAttack( self, dt )
	self.pos = go.get_position()
	self.targetPos = go.get_position( self.target )
	self.dir = vmath.normalize( self.targetPos - self.pos )
	self.pos.x = self.pos.x + self.dir.x * self.speed * dt
	self.pos.y = self.pos.y + self.dir.y * self.speed * dt

	sprite.set_hflip( "#sprite", self.dir.x > 0 )

	if lua.approximates( self.pos.x, self.targetPos.x, 50 ) and 
	   lua.approximates( self.pos.y, self.targetPos.y, 50 ) then
		switchToIdle( self )
	end
	
	if isImpenetrable( self.pos.x, self.pos.y ) then
		switchToIdle( self )
	else
		-- bounce off if *someone/something*  
		-- provides a pushback force
		if self.pushback then 
			if MAP:isPassable( self.pos.x + self.pushback.x * dt, self.pos.y + self.pushback.y * dt ) then
				self.pos.x = self.pos.x + self.pushback.x * dt
				self.pos.y = self.pos.y + self.pushback.y * dt
				self.pushback = self.pushback * .95
				if vmath.length( self.pushback ) < 1 then self.pushback = nil end
			else
				self.pushback = nil 
			end
		end
		go.set_position( self.pos )
	end
end



-- lifecycle methods ------------------------------
function init( self )
	go.set_scale( .5 )

	local pos = go.get_position()
	go.set_position( vmath.vector3( pos.x, pos.y, .4 ) )

	self.mode = MODE_IDLE
	self.pos = go.get_position()
	self.targetPos = go.get_position()
	selectTargetPos( self )
end


function update( self, dt ) 
	if PLAYER_ID ~= "" then 
		if self.mode == MODE_IDLE then
			updateIdle( self, dt )
			
		elseif self.mode == MODE_ATTACK then
			updateAttack( self, dt )
			
		end
	end
	
end


function on_message( self, message_id, message, sender )
	if message_id == MSG_SET_PROPS then
		setup( self, message )

	elseif message_id == GAME.MSG_EXEC_CMD then 
		parse( self, message )

	elseif message_id == MSG_TRIGGER_COLLISION then
		if( message.other_group == GROUP_OBSTACLES ) then 
			local url = msg.url( nil, message.other_id, "script" )
			if message.enter == true then 
				if goGetProperty( url, "blocking" ) then
					-- bounce off obstacles
					self.pushback = -self.dir * 400
					self.pushback.y = 0

					selectTargetPos( self )
				end
			end
		end
		
	end
	
end

