require( "deflibs.defold" )

local Events = require( "level.playground.events" )
local lua = require( "deflibs.lualib" )
local vcontroller = require( "in.onscreen" )
local Stats = require( "level.playground.characters.player.stats" )
local Weapon = require( "level.playground.characters.player.weapon" )

go.property( "dir", vmath.vector3( 0, 1, 0 ) )
go.property( "angle", vmath.vector3( 0, 1, 0 ) )
go.property( "speed", 0 )
go.property( "isLocalHero", false )


local MSG_ON_FIRST_TICK 	= hash( "firsttick" )
local MSG_TRIGGER_COLLISION = hash( "trigger_response" ) 
local MSG_INTERACT 			= hash( "interact" )
local MSG_READY_TO_INTERACT = hash( "readyToInteract" )
local MSG_STICK 			= hash( "stick" )
local MSG_BTN_ACTION 		= hash( "action" )
local MSG_BTN_JUMP	 		= hash( "jump" )

local GROUP_BUTTON = hash( "button" )
local GROUP_TREASURE = hash( "treasure" )
local GROUP_DOOR = hash( "door" )
local GROUP_OBSTACLES = hash( "obstacle" )
local GROUP_PLAYERS = hash( "player" )


local LEFT = hash( "key_left" )
local RIGHT = hash( "key_right" )
local UP = hash( "key_up" )
local DOWN = hash( "key_down" )
local CMD_LEFT = hash( "key_lsuper" )
local CMD_RIGHT = hash( "key_rsuper" )
local CMD_OPTION_LEFT = hash( "key_lalt" )
local CMD_OPTION_RIGHT = hash( "key_ralt" )


local function isFree( vDir, id )
	if vmath.length( vDir ) == 0 then return true end
	
	local pos = go.get_position( id )
	local other = pos + vDir
	local res = physics.raycast( pos, other, { GROUP_OBSTACLES, GROUP_PLAYERS } )
	return res == nil, res
end

local function isFreeBelow( id )
	return isFree( vmath.vector3( 0, -40, 0 ), id )
end



local function shoot( self )
	if self.stats.heat < 100 then
		self.stats:addHeat( self.weapon.heat ) 
		
		local speed = 600
		local range = 600
		local pos = go.get_position() + self.angle * 30
		local maxPos = pos + ( vmath.normalize( self.angle ) * range )
		local cid = factory.create( "/factories#locallaserfactory", pos, nil, { 
			speed = speed,  angle = self.angle,  maxPos = maxPos 
		}, .5 )

		-- make id globally available
		local shotGid = sprintf( "%s-%d", self.gid, math.random( 0, 999999 ) )
		GAME.client.registry:set( shotGid, cid )
		
		-- inform other clients
		local evt = Events.newCreateShot( self.gid, shotGid, self.angle, maxPos )
		GAME.client:sendToOtherClients( evt )
	end
end


local function interact( self )
	msg.post( self.interactWith, MSG_INTERACT, { player = go.get_id() } )

	-- inform other clients
	local gid = GAME.client.registry:getGlobalId( self.interactWith )
	local gidMe = GAME.client.registry:getGlobalId( go.get_id() )
	local evt = Events.newObjectInteract( gid, gidMe )
	GAME.client:sendToOtherClients( evt )
end


local function readyToInteract( self, isReady )
	local player = GAME.client.registry:getGlobalId( go.get_id() )
	msg.post( self.interactWith, MSG_READY_TO_INTERACT, { 
		player = player, 
		isReady = isReady 
	})

	-- inform other clients
	local gid = GAME.client.registry:getGlobalId( self.interactWith )
	local evt = Events.newObjectReadyToInteract( gid, player, isReady )
	GAME.client:sendToOtherClients( evt )
end


local function animate( self )
	if not self.animating then
		
		if self.xSpeed < .1 then
			if self.dir.x > .3 then self.animname = "standright" end
			if self.dir.x < -.3 then self.animname = "standleft" end

		else
			self.animating = true 
			if self.dir.x > 0 then self.animname = "walkright" end
			if self.dir.x < 0 then self.animname = "walkleft" end
		end

		-- whether walking or standing: look up and down only 
		-- when explicitly wanted. Is used as trigger for entering 
		-- doors, etc. Jumping uses self.dir.y = .9 but we do not 
		-- want the player to look up/down while jumping!
		if self.dir.y >  .92 then self.animname = "standup" end
		if self.dir.y < -.92 then self.animname = "standdown" end
		
		if self.animname then 
			sprite.play_flipbook( "#sprite", self.animname, function( self, message_id, message, sender ) 
				-- pprint( "done " .. message.id )
				self.animating = false
			end )
		end
		
		-- adjust camera if change of angle occurrs
		go.set( "#playercam", "angle", self.angle )
	end

	-- pprint( self.animname )
end


local function jump( self )
	if ( not MAP:isPassable( self.pos.x, self.pos.y - 40 ) ) or 
	   ( not isFreeBelow() ) then 
		self.jumpTicks = 46
	end
end


local function vcontrol( self, action )
	if action.id == MSG_STICK then
		self.xSpeed = 0
		
		if not action.released then
			self.dir.x = action.x
			
			-- initial finger touch occurs before moving:
			-- so avoid "resetting" the angle, use only if > 0
			if math.abs( action.x ) > 0 then self.angle.x = action.x end
			
			-- if player points upwards, do not move sideways:
			-- allow for player to aim and shoot above and below. 
			-- only move sideways when y movement is insignificant
			if( math.abs( action.y ) < 0.6 ) then 
				if( math.abs( action.x ) > 0 ) then 
					self.xSpeed = self.maxSpeed
				end
			else
				-- no sideways movement
				self.xSpeed = 0
			end

			if( math.abs( action.y ) > 0 ) then 
				-- horizontal firing is default, 
				-- clamp to exactly 0 when close
				if math.abs( action.y ) < .2 then 
					self.angle.y = 0 
				else
					self.angle.y = action.y
					self.dir.y = action.y
				end
			end
		end		
		animate( self )

	elseif action.id == MSG_BTN_ACTION then
		if action.pressed then self.buttons[ action.id ] = true end	
		if action.released then self.buttons[ action.id ] = false end	
		
		if self.cooldown < socket.gettime() then
			self.cooldown = socket.gettime() + .3

			if self.interactWith and self.animname == "standup" then 
				interact( self )
			else
				shoot( self )
			end 
		end

	elseif action.id == MSG_BTN_JUMP then
		jump( self )
	end
end


local function calcYSpeed( x )
	return .3 * ( x * x ) 
end


local function parse( self, message )
	if message.meta.type == Events.OBJECT_READY_TO_INTERACT then
		readyToInteract( self, message.isReady )
	end
end


-- methods ---------------------
function init( self )
	self.dir = vmath.vector3( 0, -1, 0 )
	self.pos = go.get_position()
	self.step = vmath.vector3()
	self.maxSpeed = self.speed
	self.xSpeed = 0
	self.ySpeed = 0
	self.jumpTicks = 0

	self.stats = Stats.new()

	self.weapon = lua.deepcopy( Weapon.PULSE_RIFLE )
	
	-- allow for change of animation only after completion
	self.animating = false
	self.animname = "standdown"
	
	-- prevent too many keystroke identical events
	self.cooldown = 0

	-- setup camera to follow
	go.set( "#playercam", "isLocalHero", self.isLocalHero )

	-- set me up as listener for virtual touch controller
	msg.post( "vcontroller", "register" )
	-- state of virtual buttons: pressed/not?
	self.buttons = {}

	-- provide a visual pointer for player's direction
	self.pointer = factory.create( "/factories#pointerfactory", vmath.vector3(), nil, nil, 1.2 )
	go.set_parent( self.pointer, go.get_id() )
	
	-- init this object and receive my globalId
	msg.post( ".", MSG_ON_FIRST_TICK )
end


function on_input( self, action_id, action )
	-- rudimentary support for cursor keys only
	if( action_id == LEFT ) or ( action_id == RIGHT ) then 
		if action.pressed then 
			self.dir.x = 0
			self.dir.y = 0
			self.xSpeed = self.maxSpeed
			if( action_id == LEFT ) then 
				self.dir.x = -1
				self.angle.x = -1
				self.angle.y = 0
			elseif( action_id == RIGHT ) then 
				self.dir.x = 1
				self.angle.x = 1
				self.angle.y = 0
			end
		end
		if action.released then self.xSpeed = 0 end
	end
	
	if action_id == CMD_LEFT or action_id == CMD_RIGHT then
		if self.cooldown < socket.gettime() then
			self.cooldown = socket.gettime() + .25

			if self.interactWith and self.animname == "standup" then 
				interact( self )
			else
				shoot( self )
			end
		end
	end

	if action_id == CMD_OPTION_LEFT or action_id == CMD_OPTION_RIGHT then
		jump( self )
	end

	animate( self )
end


function falldown( self )
	-- fall down
	self.jumpTicks = 0
	self.dir.y = -.9
	self.ySpeed = 250
end


function update( self, dt )
	self.pos = go.get_position()
	
	self.side = self.pos.x + ( self.dir.x * 18 )
	self.below = self.pos.y - 40
	
	if self.jumpTicks > 0 then 
		-- check if jump has left absolute outer boundaries
		if not MAP:isInBounds( self.pos.x, self.pos.y ) then 
			falldown( self )
		end
		
		-- currently jumping: important, do not use "1" but ".9"
		-- self.dir.y > .92 is for explicitly turning up/down,
		-- e.g. entering doors: also see animate()
		self.dir.y = .90
		self.ySpeed = calcYSpeed( self.jumpTicks )
		self.jumpTicks = self.jumpTicks - 1
		if self.jumpTicks < 0 then self.jumpTicks = 0 end

	else
		-- standing on solid ground?
		if MAP:isPassable( self.pos.x, self.below ) and isFreeBelow() then  
			falldown( self )
		else
			self.ySpeed = 0
			self.dir.y = 0
		end
	end

	-- standing in(!) an obstacle: may happen after 
	-- jumps that have not reached the top of a platform.
	-- In that case: fall down again
	if not MAP:isPassable( self.pos.x, self.pos.y - 5 ) and self.jumpTicks == 0 then 
		falldown( self )
	end

	-- x movement is blocked by obstacle?
	local freeSide, obj = isFree( self.dir * 18 )
	if( not MAP:isPassable( self.side, self.pos.y ) ) or not freeSide then 
		self.dir.x = 0
	end

	-- push a movable object obstacle away 
	if not freeSide then
		local p = go.get_position( obj.id )	
		-- but only if there is no additional obstacle beyond!
		if MAP:isPassable( p.x - obj.normal.x * 32, p.y ) and isFree( -32 * obj.normal, obj.id ) then 
			p.x = p.x - obj.normal.x 
			go.set_position( p, obj.id )

			-- broadcast change of position to obstacle on other clients, as well
			
		end
	end

	self.pos.x = self.pos.x + self.dir.x * self.xSpeed * dt
	self.pos.y = self.pos.y + self.dir.y * self.ySpeed * dt
	go.set_position( self.pos ) 

	-- cooldown weapon heat
	if self.stats.heat > 0 then 
		self.stats:addHeat( - dt * self.weapon.cool ) 
	end
end


function on_message( self, message_id, message, sender )
	if message_id == GAME.MSG_EXEC_CMD then
		parse( self, message )
		
	elseif message_id == MSG_ON_FIRST_TICK then 
		-- get my global id, does not work on init()
		-- cannot pass in string params on factory.create...
		self.gid = GAME.client.registry:getGlobalId( go.get_id() )

	elseif message_id == MSG_TRIGGER_COLLISION then
		if( message.other_group == GROUP_BUTTON ) or 
		  ( message.other_group == GROUP_TREASURE ) or
		  ( message.other_group == GROUP_DOOR ) then
			if message.enter then
				self.interactWith = message.other_id
				if message.other_group == GROUP_DOOR then readyToInteract( self, true ) end
			else
				if message.other_group == GROUP_DOOR then readyToInteract( self, false ) end
				self.interactWith = nil
				
			end
		end

		if( message.other_group == GROUP_TREASURE ) then 
			local url = msg.url( nil, message.other_id, "script" )
			local money = goGetProperty( url, "money" )
			if money and money > 0 then 
				self.stats:addMoney( money ) 
			end
			
		end
		
	elseif 	( message_id == vcontroller.ANALOG ) or 
			( message_id == vcontroller.BUTTON ) then 
		vcontrol( self, message )
	end
	
end



