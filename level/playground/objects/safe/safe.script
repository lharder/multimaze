local MSG_INTERACT 				= hash( "interact" )
local MSG_TRIGGER_COLLISION 	= hash( "trigger_response" ) 
local MSG_SET_PROPS 			= hash( "setProps" )

go.property( "locked", true )
go.property( "variant", 0 )
go.property( "item", 0 )


-- helpers -------------------
local function newChallenge( self, isOk )
	local url = "/factories#passwordfactory"
	if self.variant == 1 then url = "/factories#codewheelfactory" end
	
	local pos = go.get_position()
	local id = factory.create( url, pos, nil, {
		solved = isOk or false
	})

	return id
end


local function removeChallenge( self )
	if self.challengeObj ~= nil then 
		go.delete( self.challengeObj )
		self.challengeObj = nil
	end
end


local function open( self )
	if not self.animating then
		self.animating = true

		sprite.play_flipbook( "#sprite", "open", function() 
			self.animating = false
			self.locked = false
			sprite.play_flipbook( "#sprite", "opened" )
			removeChallenge( self )

			-- create a reward: interaction is triggered on all clients alike,
			-- so every client creates a reward with the same global id:
			local gid = self.name .. "Reward"
			local cid = factory.create( "/factories#" .. self.rewardFactory, go.get_position(), nil, { 
				turning = true,
				jumping = true
			})
			GAME.client.registry:set( gid, cid ) 
			
			msg.post( cid, MSG_SET_PROPS, {
				name = gid
			})
		end )
	end
end


local function animateAttempt( self, isOk ) 
	-- set challenge as solved or not
	local url = msg.url( nil, self.challengeObj, "script" )
	go.set( url, "solved", isOk or false )
	
	-- inform pwd UI to type / codewheel to turn
	msg.post( self.challengeObj, MSG_INTERACT )
	
	-- after typing / turning, exec action
	local duration = 1
	if self.variant == 1 then duration = 4 end 
	
	timer.delay( duration, false, function() 
		if isOk then open( self ) end
	end )
end



local function parse( self, message )
	if message.meta.type == Events.OBJECT_INTERACT then
		if self.challengeObj then animateAttempt( self, true ) end
	end
end


-- methods --------------------
function init( self )
end


function on_message( self, message_id, message, sender )
	if message_id == GAME.MSG_EXEC_CMD then
		parse( self, message )

	elseif message_id == MSG_INTERACT then
		if self.challengeObj then animateAttempt( self, true ) end

	elseif message_id == MSG_TRIGGER_COLLISION then
		if message.enter then
			if self.locked then self.challengeObj = newChallenge( self ) end
		else
			if self.challengeObj then removeChallenge( self ) end
		end	

	elseif message_id == MSG_SET_PROPS then
		self.name 	 		= message.name
		self.locked  		= message.properties.locked
		self.variant 		= message.properties.variant
		self.rewardCnt 		= message.properties.rewardCnt
		self.rewardFactory	= message.properties.rewardFactory
		
	end
end

