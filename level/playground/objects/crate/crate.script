require( "deflibs.defold" )

go.property( "blocking", true )

local Events = require( "level.playground.events" )

local MSG_TRIGGER_COLLISION = hash( "trigger_response" ) 
local MSG_SET_PROPS 		= hash( "setProps" )
local GROUP_SHOTS 			= hash( "shot" )
local GROUP_OBSTACLES 		= hash( "obstacle" )


local function explode( self )
	self.exploding = true
	local exploID = factory.create( "/factories#smokefactory", go.get_position(), nil, nil, 2 )
	GAME.client.registry:remove( go.get_id() )
	go.delete()
end


local function destroy( self )
	local gid = GAME.client.registry:getGlobalId( go.get_id() )
	-- possibly another instance of the shot on one of the remote
	-- hosts has already exploded and removed the gid
	if gid ~= nil then 
		local evt = Events.newDeleteObject( gid )
		GAME.client:sendToOtherClients( evt )
	end

	explode( self )
end


local function isFree( self, vDir )
	if vmath.length( vDir ) == 0 then return true end
	
	local pos = go.get_position()
	local other = pos + vDir
	local res = physics.raycast( pos, other, { GROUP_OBSTACLES } )

	return res == nil, res
end

local function isFreeBelow( self )
	local pos = go.get_position()
	return isFree( self, vmath.vector3( 0, -32, 0 ) )
end


local function parse( self, message )
	if message.meta.type == Events.DELETE_OBJECT then
		-- do not "destroy()": 
		-- prevent rebroadcasting of event
		explode( self )
	end
end



--------
function init( self )
	self.correction = vmath.vector3()

	self.pos = go.get_position()
	self.pos.z = .6
	go.set_position( self.pos )
end


function update( self, dt )	
	self.pos = go.get_position()
	self.correction = vmath.vector3()

	if MAP:isPassable( self.pos.x, self.pos.y - 32 ) then 
		if isFreeBelow( self ) then 
			self.pos.y = self.pos.y - 150 * dt
			go.set_position( self.pos )
		end
	end
end


function on_message(self, message_id, message, sender)
	if message_id == MSG_TRIGGER_COLLISION then
		if message.other_group == GROUP_SHOTS then
			destroy( self )
		end

	elseif message_id == GAME.MSG_EXEC_CMD then
		parse( self, message )

	elseif message_id == MSG_SET_PROPS then
		-- make accessible globally
		self.name = message.name
		GAME.client.registry:set( self.name, go.get_id() ) 

	end
end

